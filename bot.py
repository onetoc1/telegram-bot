import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = "7993439090:AAEqiy8YsZ7rFJxjcT_Faq59ZtT0reRrHUE"
ADMIN_ID = 5505303576  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

PROMOCODES = {
    "1win": "CAZDIME",
    "melbet": "MACL"
}

MIRRORS = {
    "1win": "https://1wbfqv.life/?open=register&p=shyf",
    "melbet": "https://refpa9819469.top/L?tag=s_429201m_18637c_&site=429201&ad=18637&r=user/registration.php"
}

subscribers = set()

def get_keyboard(user_id):
    keyboard = [
        ['–ü—Ä–æ–º–æ–∫–æ–¥ 1WIN üé∞', '–°—Å—ã–ª–∫–∞ 1WIN üîó'],
        ['–ü—Ä–æ–º–æ–∫–æ–¥ MelBet üé≤', '–°—Å—ã–ª–∫–∞ MelBet üîó'],
        ['–ú–æ–π Telegram ID üÜî']
    ]
    if user_id == ADMIN_ID:
        keyboard.append(['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω üü¢', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì¢'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    subscribers.add(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ üòä\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.",
        reply_markup=get_keyboard(user_id)
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if user_id == ADMIN_ID and context.user_data.get('waiting_broadcast'):
        message = update.message.text
        context.user_data['waiting_broadcast'] = False

        count = 0
        for uid in subscribers:
            try:
                await context.bot.send_message(chat_id=uid, text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{message}")
                count += 1
                await asyncio.sleep(0.05)
            except Exception:
                pass

        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return  # –í–∞–∂–Ω—ã–π return, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å

    text = update.message.text

    if text == '–ü—Ä–æ–º–æ–∫–æ–¥ 1WIN üé∞':
        await update.message.reply_text(f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è 1WIN: {PROMOCODES['1win']} üéâ")
    elif text == '–°—Å—ã–ª–∫–∞ 1WIN üîó':
        await update.message.reply_text(
            f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ 1WIN: <a href=\"{MIRRORS['1win']}\">–ö–õ–ò–ö</a> üîó",
            parse_mode='HTML'
        )
    elif text == '–ü—Ä–æ–º–æ–∫–æ–¥ MelBet üé≤':
        await update.message.reply_text(f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è MelBet–∞: {PROMOCODES['melbet']} üéâ")
    elif text == '–°—Å—ã–ª–∫–∞ MelBet üîó':
        await update.message.reply_text(
            f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ MelBet–∞: <a href=\"{MIRRORS['melbet']}\">–ö–õ–ò–ö</a> üîó",
            parse_mode='HTML'
        )
    elif text == '–ú–æ–π Telegram ID üÜî':
        await update.message.reply_text(f"–¢–≤–æ–π Telegram ID: {user_id} üÜî")

    elif user_id == ADMIN_ID:
        if text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω üü¢':
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª /start: {len(subscribers)}")
        elif text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì¢':
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            context.user_data['waiting_broadcast'] = True
        else:
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ."
    )

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
